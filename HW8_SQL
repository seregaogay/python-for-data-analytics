--task1  (lesson9)
-- oracle: https://www.hackerrank.com/challenges/the-report/problem

select
case
when grades.grade >= 8 then students.name
when grades.grade < 8 then NULL
end AS name, grades.grade, students.marks
from students
left join grades
on students.marks >= min_mark and students.marks <= max_mark
order by grades.grade DESC, students.name ASC, students.marks ASC;

--task2  (lesson9)
-- oracle: https://www.hackerrank.com/challenges/occupations/problem

select Doctor, Professor, Singer, Actor 
from (select Name,Occupation,
      row_number() over(partition by Occupation order by Name) as rn
      from Occupations)
pivot(min(Name) for Occupation in ('Doctor' as Doctor, 'Professor' as Professor, 'Singer' as Singer, 'Actor' as Actor))
order by rn;

--task3  (lesson9)
-- oracle: https://www.hackerrank.com/challenges/weather-observation-station-9/problem

select distinct city from station
where regexp_like(city, '^[^ A, E, I, O, U, a, e, i, o, u]');

--task4  (lesson9)
-- oracle: https://www.hackerrank.com/challenges/weather-observation-station-10/problem

select distinct city 
from station
WHERE regexp_like(city, '[^ A, E, I, O, U, a, e, i, o, u]$');

--task5  (lesson9)
-- oracle: https://www.hackerrank.com/challenges/weather-observation-station-11/problem

select distinct city 
from station
WHERE regexp_like(city, '[^ A, E, I, O, U, a, e, i, o, u]$') or regexp_like(city, '^[^ A, E, I, O, U, a, e, i, o, u]');

--task6  (lesson9)
-- oracle: https://www.hackerrank.com/challenges/weather-observation-station-12/problem

select distinct city 
from station
WHERE regexp_like(city, '[^ A, E, I, O, U, a, e, i, o, u]$') and regexp_like(city, '^[^ A, E, I, O, U, a, e, i, o, u]');


--task7  (lesson9)
-- oracle: https://www.hackerrank.com/challenges/salary-of-employees/problem

select name--, employee_id
from Employee 
where salary >2000 and months<10
order by employee_id;

--task8  (lesson9)
-- oracle: https://www.hackerrank.com/challenges/the-report/problem

select
case
when grades.grade >= 8 then students.name
when grades.grade < 8 then NULL
end AS name, grades.grade, students.marks
from students
left join grades
on students.marks >= min_mark and students.marks <= max_mark
order by grades.grade DESC, students.name ASC, students.marks ASC;
