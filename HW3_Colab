--task13 (lesson3)
--Компьютерная фирма: Вывести список всех продуктов и производителя с указанием типа продукта (pc, printer, laptop). Вывести: model, maker, type

with list as
(select model, price from pc
union all
select model, price from laptop
union all
select model, price from printer)
select product.model, maker, type
from product join list on product.model = list.model

--task14 (lesson3)
--Компьютерная фирма: При выводе всех значений из таблицы printer дополнительно вывести для тех, у кого цена вышей средней PC - "1", у остальных - "0"

select *,
case when (price > (select avg (price) from PC))
then 1
else 0
end flag
from printer

--task15 (lesson3)
--Корабли: Вывести список кораблей, у которых class отсутствует (IS NULL)

select *
from ships
full join classes
on ships.class=classes.class
where ships.class is null

--task16 (lesson3)
--Корабли: Укажите сражения, которые произошли в годы, не совпадающие ни с одним из годов спуска кораблей на воду.

select name
from (select *, extract (year from date :: date ) as yyyy
from battles) a
where yyyy not in (select launched from ships)

--task17 (lesson3)
--Корабли: Найдите сражения, в которых участвовали корабли класса Kongo из таблицы Ships.

-- выводит строчку полностью
select *
from ships s 
full join outcomes o 
on s.name=o.ship
where class = 'Kongo' and battle is not null

-- выводит только сражение
select battle
from outcomes o 
join ships s 
on s.name=o.ship
where class = 'Kongo'

--task1  (lesson4)
-- Компьютерная фирма: Сделать view (название all_products_flag_300) для всех товаров (pc, printer, laptop) с флагом, если стоимость больше > 300. Во view три колонки: model, price, flag

select *
from all_products_flag_300

drop view all_products_flag_300

create view all_products_flag_300 as
select model, price,
case when (price>'300')
then 1
else 0
end flag
from pc
union all
select model, price,
case when (price>'300')
then 1
else 0
end flag
from laptop
union all
select model, price,
case when (price>'300')
then 1
else 0
end flag
from printer

--task2  (lesson4)
-- Компьютерная фирма: Сделать view (название all_products_flag_avg_price) для всех товаров (pc, printer, laptop) с флагом, если стоимость больше cредней . Во view три колонки: model, price, flag

create view all_product_flag_avg_price as
with list as
(select model, price from pc
union all
select model, price from laptop
union all
select model, price from printer)
select product.model, price,
case when price > (select avg (price) from list) then 1 else 0 end flag
from product join list on product.model = list.model

select *
from all_product_flag_avg_price

--task3  (lesson4)
-- Компьютерная фирма: Вывести все принтеры производителя = 'A' со стоимостью выше средней по принтерам производителя = 'D' и 'C'. Вывести model

with list as
(select product.*, printer.price
from product
join printer
on printer.model = product.model)
select model from list where maker = 'A' and price > (select avg (price) from list where maker = 'D' or maker = 'C')

--task4 (lesson4)
-- Компьютерная фирма: Вывести все товары производителя = 'A' со стоимостью выше средней по принтерам производителя = 'D' и 'C'. Вывести model

with list as
(select model, price from pc
union all
select model, price from laptop
union all
select model, price from printer)
select product.model, price, maker, type
from product join list on product.model = list.model
where maker = 'A' and price > (select avg (price) from list where (maker = 'D' or maker = 'C') and type = 'Printer')

--task5 (lesson4)
-- Компьютерная фирма: Какая средняя цена среди уникальных продуктов производителя = 'A' (printer & laptop & pc)

with list as
		(
		select product.model, price, maker
		from product 
		join pc 
		on pc.model = product.model
	union all
		select product.model, price, maker
		from product 
		join laptop 
		on laptop.model = product.model
	union all
		select product.model, price, maker
		from product 
		join printer 
		on printer.model = product.model
		)
select model, avg(price)
from list
where model in
		(
		select distinct(model)
		from product 
		where maker = 'A' 
		)
group by model


--task6 (lesson4)
-- Компьютерная фирма: Сделать view с количеством товаров (название count_products_by_makers) по каждому производителю. Во view: maker, count

create view count_products_by_makers as
with list as
(select model, price from pc
union all
select model, price from laptop
union all
select model, price from printer)
select distinct count (maker) over (partition by maker), maker
from product join list on product.model = list.model

select *
from count_products_by_makers

--task7 (lesson4)
-- По предыдущему view (count_products_by_makers) сделать график в colab (X: maker, y: count)

request = """
SELECT *
from count_products_by_makers
"""
df = pd.read_sql_query(request, conn)
fig = px.bar(x=df.maker, y=df['count'].to_list(), labels={'x':'maker', 'y':'count'})
fig.show()

--task8 (lesson4)
-- Компьютерная фирма: Сделать копию таблицы printer (название printer_updated) и удалить из нее все принтеры производителя 'D'

create table printer_updated as
select printer.*,p.maker
from printer
join product p 
on printer.model=p.model;
delete from printer_updated
where maker = 'D';
alter table printer_updated drop column maker

select *
from printer_updated 

drop table printer_updated

--task9 (lesson4)
-- Компьютерная фирма: Сделать на базе таблицы (printer_updated) view с дополнительной колонкой производителя (название printer_updated_with_makers)

create view printer_updated_with_makers as
select printer_updated.*, product.maker
from printer_updated
join product
on printer_updated.model = product.model

select *
from printer_updated_with_makers 


--task10 (lesson4)
-- Корабли: Сделать view c количеством потопленных кораблей и классом корабля (название sunk_ships_by_classes). Во view: count, class (если значения класса нет/IS NULL, то заменить на 0)

create or replace view sunk_ships_by_classes as
select count(*),
case when class is null then '0' else class end as class
from (select ship, class
from outcomes o 
left join ships s 
on o.ship = s."name" 
where "result" = 'sunk') a
group by class

select * from sunk_ships_by_classes

drop view sunk_ships_by_classes

--task11 (lesson4)
-- Корабли: По предыдущему view (sunk_ships_by_classes) сделать график в colab (X: class, Y: count)

request = """
SELECT *
from sunk_ships_by_classes
"""
df = pd.read_sql_query(request, conn)
fig = px.bar(x=df.['class'], y=df['count'].to_list(), labels={'x':'class', 'y':'count'})
fig.show()

--task12 (lesson4)
-- Корабли: Сделать копию таблицы classes (название classes_with_flag) и добавить в нее flag: если количество орудий больше или равно 9 - то 1, иначе 0

create table classes_with_flag as
select *,
case when (numguns >='9') then 1 else 0 end flag
from classes

select *
from classes_with_flag

--task13 (lesson4)
-- Корабли: Сделать график в colab по таблице classes с количеством классов по странам (X: country, Y: count)

select *
from classes

create table country_count as 
select country, count (country) over (partition by country)
from classes

select *
from country_count

request = """
SELECT *
country_count
"""
df = pd.read_sql_query(request, conn)
fig = px.bar(x=df.country, y=df['count'].to_list(), labels={'x':'country', 'y':'count'})
fig.show()


--task14 (lesson4)
-- Корабли: Вернуть количество кораблей, у которых название начинается с буквы "O" или "M".

select count (*) 
from ships
where name like 'O%' or name like 'M%'


--task15 (lesson4)
-- Корабли: Вернуть количество кораблей, у которых название состоит из двух слов.
select count (*)
from ships s
where name like '% %'

--task16 (lesson4)
-- Корабли: Построить график с количеством запущенных на воду кораблей и годом запуска (X: year, Y: count)

create table launched_year as
select count(launched), launched
from ships
group by launched

request = """
SELECT *
from launched_year
"""
df = pd.read_sql_query(request, conn)
fig = px.bar(x=df['launched'].to_list(), y=df['count'].to_list(), labels={'x':'year', 'y':'count'})
fig.show()
